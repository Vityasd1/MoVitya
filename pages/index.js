import Head from 'next/head'
import axios from "axios";
import {useRecoilState} from "recoil";
import {getSession, useSession} from "next-auth/react";
import {collection, getDocs} from "firebase/firestore";
import {auth, db} from "../firebase";
import {useEffect, useState} from "react";
import {useRouter} from "next/router";
import {getAuth, signInAnonymously} from "firebase/auth";

import {watchListState as watchAtom} from "../recoil/atoms/movies";
import Header from "../components/Header";
import Nav from "../components/Nav";
import Results from "../components/Results";
import requests from "../utils/requests";

export default function Home({results,genres,watchList}) {
    const [watchListState,setWatchListState] = useRecoilState(watchAtom);
    const [searchTerm,setSearchTerm] = useState("");
    const router = useRouter();
    const session = useSession();
    useEffect( () => {
        setWatchListState(watchList);

        if (session.data && !auth.currentUser) {
            async function signInAnonym() {
                await signInAnonymously(auth).then((res) => {
                    console.log("Anonymous login");
                }).catch(e => console.log(e));
            }
            signInAnonym()
        }
    }, []);
    useEffect(() => {
        if(searchTerm.length >= 3){
            router.push(`/?query=${searchTerm}`)
        }else if(router.query?.query){
          router.push("/")
        }
    },[searchTerm])


  return (
    <div>
      <Head>
        <title>MoVitya</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <Header searchTerm={searchTerm} setSearchTerm={setSearchTerm}/>
        <Nav genres={genres}/>
        <Results results={results}/>
    </div>
  )
}

export async function getServerSideProps(context){
    const {genre: genreFromUrl, query, page} = context.query;
    const session = await getSession(context);
    let watchList = [];
    if(session){
        if (await getAuth().currentUser) {
            const querySnapshot = await getDocs(collection(db, "user", session.user.id.toString(), "movie"));
            querySnapshot.forEach((doc) => {
                watchList.push(doc.data());
            });
        } else {
            await signInAnonymously(auth).then(async (res) => {
                const querySnapshot = await getDocs(collection(db, "user", session.user.id.toString(), "movie"));
                querySnapshot.forEach((doc) => {
                    watchList.push(doc.data());
                });
            }).catch(e => console.log(e));
        }
    }
    const genres = await axios.get(`${requests.baseUrl}/genre/movie/list?api_key=${process.env.API_KEY}`).then((res) => {
        return res.data.genres;
    });
    const genre = genres.find((element) => element.name === genreFromUrl) || null;
    let req = {};
    if(query){
        req = await fetch(`${requests.baseUrl}/search/movie?query=${query}&api_key=${process.env.API_KEY}`).then((res) => res.json());
    }else{
        req = await fetch(`${requests.baseUrl}${genre ? `${requests.fetchGenre.url}${genre.id}&page=${page || 1}` : requests.fetchTrending.url}&page=${page || 1}`).then((res) => res.json());
    }


    return {
        props: {
            results: req,
            genres: genres,
            watchList: watchList
        }
    }

}
