import React, {useEffect, useState} from 'react';
import {useRecoilState} from "recoil";
import axios from "axios";
import {useRouter} from "next/router";
import {collection, getDocs} from "firebase/firestore";
import {useSession} from "next-auth/react";

import {db} from "../../firebase";
import {watchListState} from "../../recoil/atoms/movies";
import Nav from "../../components/Nav";
import Header from "../../components/Header";
import Results from "../../components/Results";
import Loader from "../../components/Loader";
import Head from "next/head";

const Watchlist = ({genres}) => {
    const session = useSession();
    const [watchList, setWatchList] = useRecoilState(watchListState);
    const [filteredList, setFilteredList] = useState(null);
    const [searchTerm, setSearchTerm] = useState("");
    const router = useRouter();
    const {genre,query} = router.query;

    useEffect( () => {
        if (watchList.length === 0) {
            if (session.status === "authenticated") {
                async function handleWatchList(){
                    const querySnapshot = await getDocs(collection(db, "user", session.data.user.id.toString(), "movie"));
                    const temp = [];
                    querySnapshot.forEach((doc) => {
                        temp.push(doc.data());
                    });
                    setWatchList(temp);
                }
                handleWatchList();
            }
        }
    }, [session, watchList]);
    useEffect(() => {
        if (genre) {
            const temp = watchList.filter((element) => {
                return element?.genre_ids?.includes(parseInt(genre))
            });
            setFilteredList(temp);
        } else {
            setFilteredList(null);
        }
    }, [genre, watchList]);
    useEffect(() => {
        if (searchTerm.length > 3) {
            router.push(`${router.pathname}/?query=${searchTerm}`);
        } else if(query) {
            router.push(`${router.pathname}`);
        }
    }, [searchTerm]);
    useEffect(() => {

        if (query) {
            const temp = watchList.filter((element) => {
                return element?.title?.toLowerCase().includes(query.toLowerCase()) ||
                    element?.overview?.toLowerCase().includes(query.toLowerCase()) ||
                    element?.original_title?.toLowerCase().includes(query.toLowerCase()) ||
                    element?.release_date?.toLowerCase().includes(query.toLowerCase()) ||
                    element?.original_name?.toLowerCase().includes(query.toLowerCase())
            });
            setFilteredList(temp);
        } else {
            setFilteredList(null);
        }
    }, [query, watchList]);

    if (session.status === "loading") {
        return <div>
            <Header/>
            <div className="h-96 w-full ">
                <div className={"flex h-full flex-col items-center justify-center"}>
                    <Loader/>
                </div>
            </div>
        </div>
    }
    if (session.status === "unauthenticated") {
        return <div>
            <Header/>
            <div className="h-96 w-full ">
                <div className={"flex h-full flex-col items-center justify-center"}>
                    <p className="font-semibold text-2xl">Access denied</p>
                </div>
            </div>
        </div>
    }
    return (
        <div>
            <Head>
                <title>Watchlist</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <Header searchTerm={searchTerm} setSearchTerm={setSearchTerm}/>
            <Nav genres={genres} localFilter={true}></Nav>
            <Results watchList={filteredList !== null ? filteredList : watchList}/>
        </div>
    );
}

export async function getServerSideProps(context) {
    const genreFromUrl = context.query.genre;

    const genres = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${process.env.API_KEY}`).then((res) => {
        return res.data.genres;
    });

    return {
        props: {
            genres: genres,
        }
    }

}

export default Watchlist;