import React, {useState} from 'react';
import axios from "axios";
import Image from 'next/image'
import {EyeIcon, EyeOffIcon, StarIcon} from "@heroicons/react/solid";
import {useRouter} from "next/router";
import {useRecoilState} from "recoil";
import Head from "next/head";


import Thumbnail from "../../../components/Thumbnail";
import requests from "../../../utils/requests";
import Header from "../../../components/Header";
import {watchListState as watchAtom} from "../../../recoil/atoms/movies";
import {useSession} from "next-auth/react";
import {addToWatchList, removeFromWatchList} from "../../../utils/watchList";
import Loader from "../../../components/Loader";

const Movie = ({movie, similarMovies}) => {
    const [watchList, setWatchList] = useRecoilState(watchAtom);
    const [similar, setSimilar] = useState(similarMovies.results.splice(0, 3));

    const [loading, setLoading] = useState(false);
    const baseUrl = process.env.NEXT_PUBLIC_API_URL;
    const session = useSession();
    const router = useRouter();
    const getVoteCount = () => {
        let count = movie.vote_count.toString();
        if (count.length > 4) {
            return count.slice(0, -3) + "K";
        }
        return movie.vote_count;
    }
    const handleGenreClick = (e, genre) => {
        e.preventDefault();
        router.push(`/?genre=${genre.name}`)
    }
    const handleAddToWatchListClick = async (e) => {
        e.preventDefault();
        setLoading(true);
        await addToWatchList(movie, session, setWatchList);
        setLoading(false);
    }
    const handleRemoveFromWatchListClick = async (e) => {
        e.preventDefault();
        setLoading(true);
        await removeFromWatchList(movie, session, watchList, setWatchList);
        setLoading(false);
    }

    return (
        <div>
            <Head>
                <title>{movie.title || movie.original_title}</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <Header/>
            <div className="flex lg:flex-row flex-col">
                <div className={"flex flex-1 items-center flex-col px-3"}>
                    <p className={"text-center uppercase tracking-wider pb-3 text-xl sm:text-3xl font-semibold"}>{movie.title}</p>
                    <div>
                        <div className="relative">
                            <Image
                                src={
                                    `${baseUrl}${movie.backdrop_path || movie.poster_path}` ||
                                    `${baseUrl}${movie.poster_path}`
                                }
                                height={1080}
                                width={1920}
                                layout={"responsive"}
                                className="cursor-pointer"
                                onClick={() => router.push(movie.homepage)}
                                alt={"Movie"}
                            />
                            <div
                                className="relative sm:absolute flex items-center justify-start gap-1 sm:gap-2 md:gap-2 bottom-0 right-0 mb-3 mt-1 text-gray-200 mr-1 md:mr-2">
                                {movie.genres.map((genre) => (
                                    <div key={genre.id}
                                         className={"flex items-center cursor-pointer hover:scale-125 justify-center rounded-xl hover:text-white bg-black p-2 bg-opacity-70"}
                                         onClick={(e) => handleGenreClick(e, genre)}>
                                        <p>{genre.name}</p>
                                    </div>
                                ))
                                }
                            </div>
                            {session.data &&
                            <>
                                {!loading ? watchList.find(element => element.id === movie.id) ?
                                    <div onClick={handleRemoveFromWatchListClick}
                                         className={"absolute hover:text-red-300 text-white cursor-pointer flex items-center justify-end flex-col top-5 right-5 bg-black bg-opacity-70 rounded-lg p-3"}>
                                        <EyeIcon className="h-6 sm:h-12 shadow-xl"/>
                                        <p>Added</p>
                                    </div>
                                    :
                                    <div onClick={handleAddToWatchListClick}
                                         className={"absolute hover:text-green-500 text-gray-400 cursor-pointer flex items-center justify-end flex-col top-5 right-5 bg-black bg-opacity-70 rounded-lg p-3"}>
                                        <EyeOffIcon className="h-6 sm:h-12 shadow-xl"/>
                                        <p>Watchlist</p>
                                    </div>
                                    :
                                    <div className={"absolute hover:text-green-500 text-gray-400 cursor-pointer flex items-center justify-end flex-col top-5 right-5 bg-black bg-opacity-70 rounded-lg p-3"}>
                                        <Loader/>
                                    </div>

                                }


                            </>

                            }

                        </div>
                        <div className="flex justify-between items-center mt-1 px-3">
                            <h3 className="mb-1">{movie.release_date}</h3>
                            <div className="flex text-gray-300 items-center cursor-pointer">
                                <StarIcon className="text-yellow-500 h-5 pr-1"/>
                                <p><span
                                    className="text-white font-bold">{movie.vote_average}</span>/10{' '}•{' '}{getVoteCount()}
                                </p>
                            </div>

                        </div>
                        <p className={"pt-2 px-3 mb-2"}>{movie.overview}</p>
                    </div>
                </div>
                <div className="flex flex-col md:flex-grow-0  lg:mr-10">
                    <h1 className={"text-center pb-3 text-xl sm:text-3xl font-semibold"}>Hasonló tartalmak</h1>
                    <div className='justify-center flex flex-shrink flex-col items-center'>
                        {similar.map((result) => (
                            <Thumbnail key={result.id} movie={result}/>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    );
}

export async function getServerSideProps(context) {
    const {id: movieId} = context.params;
    const response = await axios.get(`${requests.baseUrl}/movie/${movieId}?api_key=${process.env.API_KEY}`);
    const data = response?.data;
    const {data: similarMovieData} = await axios.get(`${requests.baseUrl}/movie/${movieId}/similar?api_key=${process.env.API_KEY}`) || null;
    if (!data) {
        return {notFound: true}
    }
    return {
        props: {
            movie: data,
            similarMovies: similarMovieData
        }
    }

}

export default Movie;